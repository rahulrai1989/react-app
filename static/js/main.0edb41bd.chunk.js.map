{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","divStyle","color","backgroundColor","_useState","useState","_useState2","_slicedToArray","myStyle","setMyStyle","React","createElement","Fragment","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","Alert","props","alert","concat","role","msg","Navbar","mode","data-bs-theme","Link","to","title","aria-label","aboutText","toggleMode","htmlFor","TexthtmlForm","text","setText","heading","rows","value","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","BrowserRouter","document","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.0edb41bd.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nexport default function About() {\n    let divStyle = {\n        color: 'black',\n        backgroundColor: 'white',\n    }\n    const [myStyle, setMyStyle] = useState(divStyle);\n\n    const handleDarkModeClick = () => {\n        let divStyle = {\n            color: 'red',\n            backgroundColor: 'black',\n        }\n        setMyStyle(divStyle);\n    }\n\n    const handleLightModeClick = () => {\n        setMyStyle(divStyle);\n    }\n\n    return (\n        <>\n            <div className=\"container\" style={myStyle}>\n                <h1>About Us</h1>\n                <div className=\"accordion my-3\" id=\"accordionExample\">\n                    <div className=\"accordion-item\" style={myStyle}>\n                        <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\n                            Accordion Item #1\n                        </button>\n                        </h2>\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\">\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                        </div>\n                    </div>\n                    <div className=\"accordion-item\" style={myStyle}>\n                        <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\n                            Accordion Item #2\n                        </button>\n                        </h2>\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\">\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                        </div>\n                    </div>\n                    <div className=\"accordion-item\" style={myStyle}>\n                        <h2 className=\"accordion-header\">\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\n                            Accordion Item #3\n                        </button>\n                        </h2>\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                        <div className=\"accordion-body\">\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                        </div>\n                        </div>\n                    </div>\n                </div>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={handleDarkModeClick}>Enable dark mode</button>\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleLightModeClick}>Enable light mode</button>\n            </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{props.alert.msg}</strong>\n        </div>\n    )\n}\n\nexport default Alert\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n        <>\n            <nav className={`navbar navbar-expand-lg bg-${props.mode}`} data-bs-theme={props.mode}>\n                <div className=\"container-fluid\">\n                    <Link className={`nav-link active text-${props.mode === 'light' ? 'dark' : 'light'}`} to={`/`}>{props.title}</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link active\" to={`/`}>Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to={`about`}>{props.aboutText}</Link>\n                        </li>\n                    </ul>\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\n                    </div>\n                </div>\n                </div>\n            </nav>\n        </>\n  )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired,\n    mode: PropTypes.string.isRequired,\n}\n\nNavbar.defaultProps = {\n    title: 'Set title',\n    aboutText: 'Set about',\n    mode: 'light'\n}\n","import React, { useState } from 'react'\n\nexport default function TexthtmlForm(props) {\n    const [text, setText] = useState('');\n\n    const handleUpClick = () => {\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert('Converted to uppercase', 'success');\n    }\n\n    const handleDownClick = () => {\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert('Converted to lowercase', 'success');\n    }\n\n    const handleOnChange = (event) => {\n        setText(event.target.value);\n    }\n    \n    return (\n        <>\n            <div className=\"container\">\n                <h1 className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange}></textarea>\n                </div>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\n                <button type=\"button\" className=\"btn btn-primary mx-3\" onClick={handleDownClick}>Convert to Lowercase</button>\n            </div>\n            <div className=\"container my-3\">\n                <h2 className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>Your text summery</h2>\n                <p className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>{text.split(' ').length} <b>words</b> and {text.length} <b>character</b></p>\n                <h2 className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>Text preview</h2>\n                <p className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>{text}</p>\n            </div>\n        </>\n    )\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TexthtmlForm from './components/TextForm';\nimport {\n    BrowserRouter,\n    Routes,\n    Route,\n    Link,\n  } from \"react-router-dom\";\n\n\nfunction App() {\n    const [mode, setMode] = useState('light');\n    const [alert, setAlert] = useState(null);\n\n    const showAlert = (message, type) => {\n        setAlert({\n            msg: message,\n            type: type\n        })\n        setTimeout(() => {\n            setAlert(null);\n        }, 2000);\n    }\n\n    const toggleMode = () => {\n        if (mode === 'light') {\n            setMode('dark');\n            document.body.style.backgroundColor = '#042743';\n            showAlert('Dark mode has been enabled', 'success');\n        } else {\n            setMode('light');\n            document.body.style.backgroundColor = '#FFFFFF';\n            showAlert('Light mode has been enabled', 'success');\n        }\n    }\n\n    return (\n        <>\n            <BrowserRouter>\n                <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n                <Alert alert={alert} />\n                <div className=\"container my-3\">\n                    <Routes>\n                        <Route exact path=\"/\" element={<TexthtmlForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert} />} />\n                        <Route exact path=\"about\" element={<About />} />\n                    </Routes>\n                </div>\n            </BrowserRouter>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}